{"version":3,"sources":["App.js","reportWebVitals.js","index.js","stores/reducers/todo/index.js","stores/actions/saga.js","apis/index.js","stores/store.js"],"names":["App","TodoList","lazy","TodoDetail","Loading","className","fallback","exact","path","name","element","memo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","theme","extendTheme","useSystemColorMode","initialColorMode","document","getElementById","todo","createSlice","initialState","reducers","createNewTodo","state","action","push","payload","fetchData","getTodo","actions","sagaActions","FETCH_DATA_SAGA","fetchDataSaga","rootSaga","callAPI","a","url","method","data","Axios","call","result","drinks","map","id","idDrink","strGlass","description","strCategory","put","type","takeLeading","sagaMiddleware","createSagaMiddleware","configureStore","reducer","todoReducer","middleware","getDefaultMiddleware","thunk","concat","run","saga"],"mappings":"2KAKA,SAASA,IACP,IAAMC,EAAWC,gBAAK,kBAAM,uDACtBC,EAAaD,gBAAK,kBAAM,iCACxBE,EAAU,kBAAM,yBAGtB,OACE,qBAAKC,UAAU,kCAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAU,cAACF,EAAD,IAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEG,OAAK,EACLC,KAAK,IACLC,KAAK,YACLC,QAAS,cAACT,EAAD,MAEX,cAAC,IAAD,CACEM,OAAK,EACLC,KAAK,OACLC,KAAK,cACLC,QAAS,cAACP,EAAD,iBAWVQ,qBAAKX,GC1BLY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kCCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,IAAjB,SACE,cAAC,IAAD,CAAgBC,MAAOC,YAAY,CACjCC,oBAAoB,EACpBC,iBAAkB,UAFpB,SAIE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1BlB,K,gCC1BA,gFAIMmB,EAAOC,YAAY,CACrBvB,KAAM,OACNwB,aAJiB,GAKjBC,SAAU,CACNC,cADM,SACQC,EAAOC,GACjBD,EAAME,KAAKD,EAAOE,UAEtBC,UAAW,SAACJ,EAAOC,GACf,OAAOA,EAAOE,YAMbE,EAAU,SAAAL,GAAK,cAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOL,MAGhC,EAAqCA,EAAKW,QAAnBF,GAAvB,EAAQL,cAAR,EAAuBK,WACfT,MAAf,S,gCCtBA,kCAAO,IAAMY,EAAc,CACvBC,gBAAiB,oB,iICYJC,G,WAiBQC,GAzBrBC,EAAO,uCAAG,iCAAAC,EAAA,6DAASC,EAAT,EAASA,IAAKC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,KAAtB,SACGC,IAAM,CACfH,MACAC,SACAC,SAJM,mFAAH,sDAQJ,SAAUN,IAAV,6EAEc,OAFd,kBAEoBQ,aAAK,kBACpBN,EAAQ,CAAEE,IAAK,0EAHpB,OAWC,OATIK,EAFL,OAKCA,EAAM,UAAGA,SAAH,iBAAG,EAAQH,YAAX,iBAAG,EAAcI,cAAjB,aAAG,EAAsBC,KAAI,SAAAL,GAAI,MAAK,CACxCM,GAAG,QAAD,OAAUN,EAAKO,SACjBjD,KAAM0C,EAAKQ,SACXC,YAAaT,EAAKU,gBARvB,SAWOC,YAAItB,YAAUc,IAXrB,8BAaC,OAbD,mCAaOQ,YAAI,CAAEC,KAAM,sBAbnB,qDAiBQ,SAAUjB,IAAV,iEACX,OADW,SACLkB,YAAYrB,IAAYC,gBAAiBC,GADpC,uCCxBf,IAAIoB,EAAiBC,cACf1C,EAAQ2C,YAAe,CACzBC,QAAS,CACLrC,KAAMsC,KAEVC,WAAY,SAACC,GAAD,OAA0BA,EAAqB,CAAEC,OAAO,IAASC,OAAOR,MAGxFA,EAAeS,IAAIC,GAEJnD,O","file":"static/js/main.575190de.chunk.js","sourcesContent":["\nimport { lazy, memo, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  const TodoList = lazy(() => import('./screens/todo-list'))\n  const TodoDetail = lazy(() => import('./screens/todo-detail'))\n  const Loading = () => <div></div>\n\n\n  return (\n    <div className='w-full flex justify-center p-10'>\n      <div className='App md:w-1/3 w-full'>\n        <Router>\n          <Suspense fallback={<Loading />}>\n            <Routes>\n              <Route\n                exact\n                path='/'\n                name='Todo List'\n                element={<TodoList />}\n              />\n              <Route\n                exact\n                path='/:id'\n                name='Todo Detail'\n                element={<TodoDetail />}\n              />\n            </Routes>\n          </Suspense>\n        </Router>\n      </div>\n    </div>\n\n  );\n}\n\nexport default memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './stores/store'\nimport { ChakraProvider, extendTheme } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ChakraProvider theme={extendTheme({\n        useSystemColorMode: false,\n        initialColorMode: \"light\",\n      })}>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = []\n\nconst todo = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        createNewTodo(state, action) {\n            state.push(action.payload)\n        },\n        fetchData: (state, action) => {\n            return action.payload\n        }\n    },\n})\n\n// getter\nexport const getTodo = state => state?.todo\n\n//setter\nexport const { createNewTodo, fetchData } = todo.actions\nexport default todo.reducer\n","export const sagaActions = {\n    FETCH_DATA_SAGA: \"FETCH_DATA_SAGA\"\n};\n","import { call, takeEvery, put, takeLeading } from \"redux-saga/effects\";\nimport Axios from \"axios\";\nimport { fetchData } from \"../stores/reducers/todo\";\nimport { sagaActions } from \"../stores/actions/saga\";\n\nlet callAPI = async ({ url, method, data }) => {\n    return await Axios({\n        url,\n        method,\n        data\n    });\n};\n\nexport function* fetchDataSaga() {\n    try {\n        let result = yield call(() =>\n            callAPI({ url: \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=margarita\" })\n        );\n        result = result?.data?.drinks?.map(data => ({\n            id: `item-${data.idDrink}`,\n            name: data.strGlass,\n            description: data.strCategory\n\n        }))\n        yield put(fetchData(result));\n    } catch (e) {\n        yield put({ type: \"TODO_FETCH_FAILED\" });\n    }\n}\n\nexport default function* rootSaga() {\n    yield takeLeading(sagaActions.FETCH_DATA_SAGA, fetchDataSaga);\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport todoReducer from './reducers/todo'\nimport createSagaMiddleware from \"redux-saga\";\nimport saga from '../apis'\n\n\nlet sagaMiddleware = createSagaMiddleware();\nconst store = configureStore({\n    reducer: {\n        todo: todoReducer\n    },\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware({ thunk: false }).concat(sagaMiddleware)\n})\n\nsagaMiddleware.run(saga);\n\nexport default store"],"sourceRoot":""}