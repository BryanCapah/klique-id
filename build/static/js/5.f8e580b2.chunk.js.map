{"version":3,"sources":["screens/todo-list/hooks.js","screens/todo-list/create.jsx","screens/todo-list/show.jsx","screens/todo-list/index.jsx"],"names":["useDraggable","todo","setTodo","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","borderRadius","getListStyle","isDraggingOver","width","onDragEnd","result","destination","items","list","startIndex","endIndex","Array","from","splice","removed","reorder","source","index","TodoCreate","onClick","activeTodo","console","log","item","filter","data","idx","useState","name","description","id","length","create","setCreate","createHandler","useCallback","e","target","value","current","nameIsRequired","descriptionIsRequired","validate","required","type","useTodoCreate","className","autoComplete","style","borderColor","defaultValue","onChange","placeholder","TodoList","todoIsEmpty","search","setSearch","dataFromApi","useSelector","getTodo","useEffect","store","dispatch","sagaActions","FETCH_DATA_SAGA","droppableId","provided","snapshot","droppableProps","ref","innerRef","toLowerCase","includes","map","todoItem","draggableId","draggableProps","dragHandleProps","Todo","tab","setTab","setActiveTodo","showBackIcon","showCreateIcon","setTodoHandler","navigateToEditHandler","navigateToCreateHandler","useColorMode","colorMode","toggleColorMode","lightIcon","faLightbulb","faPowerOff","icon","faArrowLeft","useTodoList","faPlus"],"mappings":"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","file":"static/js/5.f8e580b2.chunk.js","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { faArrowLeft, faLightbulb, faPowerOff } from \"@fortawesome/fontawesome-free-solid\"\nimport { useCallback, useState } from \"react\"\n\nexport const useTodoList = () => {\n    const [todo, setTodo] = useState([])\n    const [tab, setTab] = useState('list')\n    const [activeTodo, setActiveTodo] = useState()\n    const showBackIcon = tab === 'edit' || tab === 'create'\n    const showCreateIcon = tab === 'list'\n\n    const setTodoHandler = useCallback(({ data, type, index }) => {\n        switch (type) {\n            case 'add':\n                setTodo(current => [...current, data])\n                break;\n            case 'edit':\n                setTodo(current => current.map((item, idx) => {\n                    if (idx === index) item = data\n                    return item\n                }))\n                break;\n            default:\n                break\n        }\n        setTab('list')\n    }, [])\n\n    const navigateToEditHandler = useCallback((index) => {\n        setActiveTodo(index)\n        setTab('edit')\n    }, [])\n\n    const navigateToCreateHandler = useCallback((index) => {\n        setActiveTodo()\n        setTab('create')\n    }, [])\n\n\n    const { colorMode, toggleColorMode } = useColorMode()\n\n\n    const lightIcon = (colorMode === 'dark' ? faLightbulb : faPowerOff)\n    const icon = showBackIcon ? faArrowLeft : lightIcon\n\n    return {\n        todo,\n        setTodo,\n        tab,\n        setTab,\n        activeTodo,\n        setActiveTodo,\n        showBackIcon,\n        showCreateIcon,\n        setTodoHandler,\n        navigateToCreateHandler,\n        navigateToEditHandler,\n        toggleColorMode,\n        icon\n    }\n}\n\nexport const useTodoCreate = ({ onClick, todo, activeTodo }) => {\n    console.log(todo, activeTodo);\n    const item = todo?.filter((data, idx) => idx === activeTodo)[0]\n    const [create, setCreate] = useState({\n        name: item?.name,\n        description: item?.description,\n        id: `item-${todo?.length}`\n    })\n\n\n    const createHandler = useCallback((e) => {\n        const { name, value } = e.target\n        setCreate(current => ({ ...current, [name]: value }))\n    }, [])\n\n    const { name, description, nameIsRequired, descriptionIsRequired } = create\n\n    const validate = () => {\n        let required = false\n        if (!name || !description) {\n            if (!name) setCreate(current => ({ ...current, nameIsRequired: true }))\n            else setCreate(current => ({ ...current, nameIsRequired: false }))\n            if (!description) setCreate(current => ({ ...current, descriptionIsRequired: true }))\n            else setCreate(current => ({ ...current, nameIsRequired: false }))\n            required = true\n        }\n        else required = false\n        !required && onClick({ data: create, type: item ? 'edit' : 'add', index: activeTodo })\n    }\n\n    return {\n        create,\n        setCreate,\n        createHandler,\n        name,\n        description,\n        nameIsRequired,\n        descriptionIsRequired,\n        validate\n    }\n}\n\nexport const useDraggable = ({ todo, setTodo }) => {\n    const getListStyle = isDraggingOver => ({\n        background: isDraggingOver ? \"#3B81F6\" : \"lightgrey\",\n        padding: grid,\n        width: '100%',\n        borderRadius: '7px'\n    });\n\n    const getItemStyle = (isDragging, draggableStyle) => ({\n        userSelect: \"none\",\n        padding: grid * 2,\n        margin: `0 0 ${grid}px 0`,\n        background: isDragging ? \"lightgrey\" : \"white\",\n        borderRadius: '7px',\n        ...draggableStyle\n    });\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    const grid = 8;\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return;\n        }\n\n        const items = reorder(\n            todo,\n            result.source.index,\n            result.destination.index\n        );\n        setTodo(items)\n    }\n\n    return {\n        getItemStyle,\n        getListStyle,\n        onDragEnd,\n\n    }\n}","import { Button } from \"@chakra-ui/button\"\nimport { Input } from \"@chakra-ui/input\"\nimport { Textarea } from \"@chakra-ui/textarea\"\nimport { useTodoCreate } from \"./hooks\"\n\nconst TodoCreate = ({ onClick, todo, activeTodo }) => {\n    const {\n        createHandler,\n        name,\n        description,\n        nameIsRequired,\n        descriptionIsRequired,\n        validate\n    } = useTodoCreate({ onClick, todo, activeTodo })\n\n    return (\n        <div className='an-fade w-full'>\n            <Input\n                autoComplete='off'\n                style={{ borderColor: nameIsRequired && 'red' }}\n                defaultValue={name}\n                name='name'\n                onChange={createHandler}\n                placeholder='Input Todo'\n                className={`border-2 rounded-md mb-3`} />\n            <Textarea\n                autoComplete='off'\n                style={{ borderColor: descriptionIsRequired && 'red' }}\n                defaultValue={description}\n                onChange={createHandler}\n                name='description'\n                placeholder='Input description' />\n            <Button\n                onClick={() => validate()}\n                className='mt-3'>\n                Done\n            </Button>\n        </div>\n    )\n}\n\nexport default TodoCreate","import { Input } from \"@chakra-ui/input\"\nimport { useEffect, useState } from \"react\"\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useSelector } from \"react-redux\";\nimport { sagaActions } from \"../../stores/actions/saga\";\nimport { getTodo } from \"../../stores/reducers/todo\";\nimport store from \"../../stores/store\";\nimport { useDraggable } from \"./hooks\";\n\nconst TodoList = ({ todo, onClick, setTodo }) => {\n    const todoIsEmpty = todo?.length === 0\n    const [search, setSearch] = useState('')\n\n    const {\n        getItemStyle,\n        getListStyle,\n        onDragEnd,\n\n    } = useDraggable({ todo, setTodo })\n\n    const dataFromApi = useSelector(getTodo)\n\n    useEffect(() => {\n        store.dispatch(({ type: sagaActions.FETCH_DATA_SAGA }))\n\n    }, [])\n\n    if (todoIsEmpty) return (\n        <div className='an-fade w-full p-3'>\n            <span className='text-blue-500 font-bold'>\n                Todo is Empty. Please create new Todo ( + )\n                or <span className='cursor-pointer underline' onClick={() => setTodo(dataFromApi)}>get from Api</span>\n            </span>\n        </div>\n    )\n\n    return (\n        < div className='an-fade w-full' >\n            <Input\n                autoComplete='off'\n                name='name'\n                onChange={(e) => setSearch(e.target.value)}\n                placeholder='Search Todo'\n                className={`border-2 rounded-md mb-3`} />\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId='droppable'>\n                    {(provided, snapshot) => (\n                        <div\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}\n                        >\n                            {\n                                todo?.filter(item => item?.name?.toLowerCase()?.includes(search?.toLowerCase()))?.map((todoItem, idx) => {\n                                    const { name, id } = todoItem\n                                    return (\n                                        <Draggable\n                                            key={id} draggableId={id} index={idx}\n                                            onClick={() => onClick(idx)}\n                                            className='w-full border-b-2 mb-3 hover:bg-blue-300 transition-all rounded-md cursor-pointer p-3'>\n                                            {(provided, snapshot) => (\n                                                <div\n                                                    onClick={() => onClick(idx)}\n                                                    ref={provided.innerRef}\n                                                    {...provided.draggableProps}\n                                                    {...provided.dragHandleProps}\n                                                    style={getItemStyle(\n                                                        snapshot.isDragging,\n                                                        provided.draggableProps.style\n                                                    )}\n                                                >\n                                                    {name}\n                                                </div>\n                                            )}\n                                        </Draggable>\n                                    )\n                                })\n                            }\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n        </div >\n    )\n}\n\nexport default TodoList","import { faPlus } from \"@fortawesome/fontawesome-free-solid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport TodoCreate from \"./create\";\nimport { useTodoList } from \"./hooks\";\nimport TodoList from \"./show\";\n\nexport default function Todo() {\n    const {\n        todo,\n        tab,\n        setTab,\n        activeTodo,\n        showBackIcon,\n        showCreateIcon,\n        setTodoHandler,\n        navigateToCreateHandler,\n        navigateToEditHandler,\n        toggleColorMode,\n        icon,\n        setTodo\n    } = useTodoList()\n\n    return (\n        <div className=''>\n            <div className='p-3 font-bold text-white bg-blue-500 rounded-md w-full flex justify-between items-center'>\n                <FontAwesomeIcon\n                    onClick={() => showBackIcon ? setTab('list') : toggleColorMode()}\n                    className={`cursor-pointer`}\n                    icon={icon} />\n                <span>Todo List</span>\n                <FontAwesomeIcon\n                    onClick={() => showCreateIcon && navigateToCreateHandler()}\n                    className={`${showCreateIcon ? 'cursor-pointer' : 'text-transparent'}`}\n                    icon={faPlus} />\n            </div>\n            <br />\n            {tab === 'list' && <TodoList todo={todo} onClick={navigateToEditHandler} setTodo={setTodo} />}\n            {(tab === 'create' || tab === 'edit') && <TodoCreate todo={todo} onClick={setTodoHandler} activeTodo={activeTodo} />}\n        </div>\n    )\n\n}"],"sourceRoot":""}